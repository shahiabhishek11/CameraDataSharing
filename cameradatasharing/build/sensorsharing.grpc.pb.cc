// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensorsharing.proto

#include "sensorsharing.pb.h"
#include "sensorsharing.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sspkg {

static const char* SensorSharing_method_names[] = {
  "/sspkg.SensorSharing/register_",
  "/sspkg.SensorSharing/captureImage",
  "/sspkg.SensorSharing/getConfiguration",
  "/sspkg.SensorSharing/setConfiguration",
  "/sspkg.SensorSharing/toggleCameraState",
  "/sspkg.SensorSharing/startStream",
  "/sspkg.SensorSharing/stopStream",
  "/sspkg.SensorSharing/deregister",
};

std::unique_ptr< SensorSharing::Stub> SensorSharing::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SensorSharing::Stub> stub(new SensorSharing::Stub(channel, options));
  return stub;
}

SensorSharing::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_register__(SensorSharing_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_captureImage_(SensorSharing_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConfiguration_(SensorSharing_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setConfiguration_(SensorSharing_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_toggleCameraState_(SensorSharing_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_startStream_(SensorSharing_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_stopStream_(SensorSharing_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deregister_(SensorSharing_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SensorSharing::Stub::register_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::RegisterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::RegisterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_register__, context, request, response);
}

void SensorSharing::Stub::async::register_(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::RegisterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_register__, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::register_(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_register__, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>* SensorSharing::Stub::PrepareAsyncregister_Raw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::RegisterInfo, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_register__, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>* SensorSharing::Stub::Asyncregister_Raw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregister_Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorSharing::Stub::captureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Frame* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::Frame, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_captureImage_, context, request, response);
}

void SensorSharing::Stub::async::captureImage(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::Frame, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_captureImage_, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::captureImage(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_captureImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Frame>* SensorSharing::Stub::PrepareAsynccaptureImageRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::Frame, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_captureImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Frame>* SensorSharing::Stub::AsynccaptureImageRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccaptureImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorSharing::Stub::getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Configurations* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::Configurations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConfiguration_, context, request, response);
}

void SensorSharing::Stub::async::getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::Configurations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConfiguration_, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>* SensorSharing::Stub::PrepareAsyncgetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::Configurations, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>* SensorSharing::Stub::AsyncgetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorSharing::Stub::setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setConfiguration_, context, request, response);
}

void SensorSharing::Stub::async::setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setConfiguration_, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::PrepareAsyncsetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::Response, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::AsyncsetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorSharing::Stub::toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_toggleCameraState_, context, request, response);
}

void SensorSharing::Stub::async::toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_toggleCameraState_, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_toggleCameraState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::PrepareAsynctoggleCameraStateRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::Response, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_toggleCameraState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::AsynctoggleCameraStateRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctoggleCameraStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sspkg::Frame>* SensorSharing::Stub::startStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::sspkg::Frame>::Create(channel_.get(), rpcmethod_startStream_, context, request);
}

void SensorSharing::Stub::async::startStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::grpc::ClientReadReactor< ::sspkg::Frame>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sspkg::Frame>::Create(stub_->channel_.get(), stub_->rpcmethod_startStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sspkg::Frame>* SensorSharing::Stub::AsyncstartStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sspkg::Frame>::Create(channel_.get(), cq, rpcmethod_startStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sspkg::Frame>* SensorSharing::Stub::PrepareAsyncstartStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sspkg::Frame>::Create(channel_.get(), cq, rpcmethod_startStream_, context, request, false, nullptr);
}

::grpc::Status SensorSharing::Stub::stopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stopStream_, context, request, response);
}

void SensorSharing::Stub::async::stopStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stopStream_, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::stopStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stopStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::PrepareAsyncstopStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::Response, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stopStream_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::AsyncstopStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopStreamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SensorSharing::Stub::deregister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deregister_, context, request, response);
}

void SensorSharing::Stub::async::deregister(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deregister_, context, request, response, std::move(f));
}

void SensorSharing::Stub::async::deregister(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deregister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::PrepareAsyncderegisterRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sspkg::Response, ::sspkg::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deregister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sspkg::Response>* SensorSharing::Stub::AsyncderegisterRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncderegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

SensorSharing::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::RegisterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::RegisterInfo* resp) {
               return service->register_(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Frame, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::Frame* resp) {
               return service->captureImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Configurations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::Configurations* resp) {
               return service->getConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::Response* resp) {
               return service->setConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::Response* resp) {
               return service->toggleCameraState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Frame>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::grpc::ServerWriter<::sspkg::Frame>* writer) {
               return service->startStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::Response* resp) {
               return service->stopStream(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorSharing_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SensorSharing::Service, ::sspkg::Request, ::sspkg::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SensorSharing::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sspkg::Request* req,
             ::sspkg::Response* resp) {
               return service->deregister(ctx, req, resp);
             }, this)));
}

SensorSharing::Service::~Service() {
}

::grpc::Status SensorSharing::Service::register_(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::captureImage(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::getConfiguration(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::setConfiguration(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::toggleCameraState(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::startStream(::grpc::ServerContext* context, const ::sspkg::Request* request, ::grpc::ServerWriter< ::sspkg::Frame>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::stopStream(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorSharing::Service::deregister(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sspkg

