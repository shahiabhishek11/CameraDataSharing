// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorsharing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensorsharing_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensorsharing_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensorsharing_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensorsharing_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sensorsharing_2eproto;
namespace sspkg {
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Configuration;
struct ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class Configurations;
struct ConfigurationsDefaultTypeInternal;
extern ConfigurationsDefaultTypeInternal _Configurations_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class RegisterInfo;
struct RegisterInfoDefaultTypeInternal;
extern RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace sspkg
PROTOBUF_NAMESPACE_OPEN
template <>
::sspkg::Camera* Arena::CreateMaybeMessage<::sspkg::Camera>(Arena*);
template <>
::sspkg::Configuration* Arena::CreateMaybeMessage<::sspkg::Configuration>(Arena*);
template <>
::sspkg::Configurations* Arena::CreateMaybeMessage<::sspkg::Configurations>(Arena*);
template <>
::sspkg::Frame* Arena::CreateMaybeMessage<::sspkg::Frame>(Arena*);
template <>
::sspkg::RegisterInfo* Arena::CreateMaybeMessage<::sspkg::RegisterInfo>(Arena*);
template <>
::sspkg::Request* Arena::CreateMaybeMessage<::sspkg::Request>(Arena*);
template <>
::sspkg::Response* Arena::CreateMaybeMessage<::sspkg::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sspkg {
enum CaptureMode : int {
  image = 0,
  video = 1,
};

bool CaptureMode_IsValid(int value);
constexpr CaptureMode CaptureMode_MIN = static_cast<CaptureMode>(0);
constexpr CaptureMode CaptureMode_MAX = static_cast<CaptureMode>(1);
constexpr int CaptureMode_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
CaptureMode_descriptor();
template <typename T>
const std::string& CaptureMode_Name(T value) {
  static_assert(std::is_same<T, CaptureMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CaptureMode_Name().");
  return CaptureMode_Name(static_cast<CaptureMode>(value));
}
template <>
inline const std::string& CaptureMode_Name(CaptureMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<CaptureMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CaptureMode_Parse(absl::string_view name, CaptureMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CaptureMode>(
      CaptureMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Configurations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.Configurations) */ {
 public:
  inline Configurations() : Configurations(nullptr) {}
  ~Configurations() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Configurations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configurations(const Configurations& from);
  Configurations(Configurations&& from) noexcept
    : Configurations() {
    *this = ::std::move(from);
  }

  inline Configurations& operator=(const Configurations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configurations& operator=(Configurations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configurations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configurations* internal_default_instance() {
    return reinterpret_cast<const Configurations*>(
               &_Configurations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Configurations& a, Configurations& b) {
    a.Swap(&b);
  }
  inline void Swap(Configurations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configurations* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configurations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configurations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configurations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Configurations& from) {
    Configurations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configurations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.Configurations";
  }
  protected:
  explicit Configurations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfFieldNumber = 1,
  };
  // repeated .sspkg.Configuration conf = 1;
  int conf_size() const;
  private:
  int _internal_conf_size() const;

  public:
  void clear_conf() ;
  ::sspkg::Configuration* mutable_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Configuration >*
      mutable_conf();
  private:
  const ::sspkg::Configuration& _internal_conf(int index) const;
  ::sspkg::Configuration* _internal_add_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Configuration>& _internal_conf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Configuration>* _internal_mutable_conf();
  public:
  const ::sspkg::Configuration& conf(int index) const;
  ::sspkg::Configuration* add_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Configuration >&
      conf() const;
  // @@protoc_insertion_point(class_scope:sspkg.Configurations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Configuration > conf_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 2,
    kConfiglistFieldNumber = 3,
    kClientIdFieldNumber = 1,
  };
  // optional string cameraId = 2;
  bool has_cameraid() const;
  void clear_cameraid() ;
  const std::string& cameraid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameraid(Arg_&& arg, Args_... args);
  std::string* mutable_cameraid();
  PROTOBUF_NODISCARD std::string* release_cameraid();
  void set_allocated_cameraid(std::string* ptr);

  private:
  const std::string& _internal_cameraid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraid(
      const std::string& value);
  std::string* _internal_mutable_cameraid();

  public:
  // optional .sspkg.Configurations configlist = 3;
  bool has_configlist() const;
  void clear_configlist() ;
  const ::sspkg::Configurations& configlist() const;
  PROTOBUF_NODISCARD ::sspkg::Configurations* release_configlist();
  ::sspkg::Configurations* mutable_configlist();
  void set_allocated_configlist(::sspkg::Configurations* configlist);
  private:
  const ::sspkg::Configurations& _internal_configlist() const;
  ::sspkg::Configurations* _internal_mutable_configlist();
  public:
  void unsafe_arena_set_allocated_configlist(
      ::sspkg::Configurations* configlist);
  ::sspkg::Configurations* unsafe_arena_release_configlist();
  // optional int32 clientId = 1;
  bool has_clientid() const;
  void clear_clientid() ;
  ::int32_t clientid() const;
  void set_clientid(::int32_t value);

  private:
  ::int32_t _internal_clientid() const;
  void _internal_set_clientid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sspkg.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
    ::sspkg::Configurations* configlist_;
    ::int32_t clientid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};// -------------------------------------------------------------------

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Camera& from) {
    Camera::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionsFieldNumber = 4,
    kCameraIdFieldNumber = 1,
    kCameraNameFieldNumber = 2,
    kSensorSizeFieldNumber = 6,
    kPixelFieldNumber = 3,
    kFrameRateFieldNumber = 5,
    kFovFieldNumber = 7,
  };
  // repeated string resolutions = 4;
  int resolutions_size() const;
  private:
  int _internal_resolutions_size() const;

  public:
  void clear_resolutions() ;
  const std::string& resolutions(int index) const;
  std::string* mutable_resolutions(int index);
  void set_resolutions(int index, const std::string& value);
  void set_resolutions(int index, std::string&& value);
  void set_resolutions(int index, const char* value);
  void set_resolutions(int index, const char* value, std::size_t size);
  void set_resolutions(int index, absl::string_view value);
  std::string* add_resolutions();
  void add_resolutions(const std::string& value);
  void add_resolutions(std::string&& value);
  void add_resolutions(const char* value);
  void add_resolutions(const char* value, std::size_t size);
  void add_resolutions(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resolutions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resolutions();

  private:
  const std::string& _internal_resolutions(int index) const;
  std::string* _internal_add_resolutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_resolutions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_resolutions();

  public:
  // optional string cameraId = 1;
  bool has_cameraid() const;
  void clear_cameraid() ;
  const std::string& cameraid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameraid(Arg_&& arg, Args_... args);
  std::string* mutable_cameraid();
  PROTOBUF_NODISCARD std::string* release_cameraid();
  void set_allocated_cameraid(std::string* ptr);

  private:
  const std::string& _internal_cameraid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraid(
      const std::string& value);
  std::string* _internal_mutable_cameraid();

  public:
  // optional string cameraName = 2;
  bool has_cameraname() const;
  void clear_cameraname() ;
  const std::string& cameraname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameraname(Arg_&& arg, Args_... args);
  std::string* mutable_cameraname();
  PROTOBUF_NODISCARD std::string* release_cameraname();
  void set_allocated_cameraname(std::string* ptr);

  private:
  const std::string& _internal_cameraname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraname(
      const std::string& value);
  std::string* _internal_mutable_cameraname();

  public:
  // optional string sensorSize = 6;
  bool has_sensorsize() const;
  void clear_sensorsize() ;
  const std::string& sensorsize() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sensorsize(Arg_&& arg, Args_... args);
  std::string* mutable_sensorsize();
  PROTOBUF_NODISCARD std::string* release_sensorsize();
  void set_allocated_sensorsize(std::string* ptr);

  private:
  const std::string& _internal_sensorsize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensorsize(
      const std::string& value);
  std::string* _internal_mutable_sensorsize();

  public:
  // optional int32 pixel = 3;
  bool has_pixel() const;
  void clear_pixel() ;
  ::int32_t pixel() const;
  void set_pixel(::int32_t value);

  private:
  ::int32_t _internal_pixel() const;
  void _internal_set_pixel(::int32_t value);

  public:
  // optional int32 frameRate = 5;
  bool has_framerate() const;
  void clear_framerate() ;
  ::int32_t framerate() const;
  void set_framerate(::int32_t value);

  private:
  ::int32_t _internal_framerate() const;
  void _internal_set_framerate(::int32_t value);

  public:
  // optional int32 fov = 7;
  bool has_fov() const;
  void clear_fov() ;
  ::int32_t fov() const;
  void set_fov(::int32_t value);

  private:
  ::int32_t _internal_fov() const;
  void _internal_set_fov(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sspkg.Camera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resolutions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensorsize_;
    ::int32_t pixel_;
    ::int32_t framerate_;
    ::int32_t fov_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};// -------------------------------------------------------------------

class RegisterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.RegisterInfo) */ {
 public:
  inline RegisterInfo() : RegisterInfo(nullptr) {}
  ~RegisterInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterInfo(const RegisterInfo& from);
  RegisterInfo(RegisterInfo&& from) noexcept
    : RegisterInfo() {
    *this = ::std::move(from);
  }

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterInfo*>(
               &_RegisterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterInfo& a, RegisterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterInfo& from) {
    RegisterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.RegisterInfo";
  }
  protected:
  explicit RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraListFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated .sspkg.Camera cameraList = 2;
  int cameralist_size() const;
  private:
  int _internal_cameralist_size() const;

  public:
  void clear_cameralist() ;
  ::sspkg::Camera* mutable_cameralist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Camera >*
      mutable_cameralist();
  private:
  const ::sspkg::Camera& _internal_cameralist(int index) const;
  ::sspkg::Camera* _internal_add_cameralist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Camera>& _internal_cameralist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Camera>* _internal_mutable_cameralist();
  public:
  const ::sspkg::Camera& cameralist(int index) const;
  ::sspkg::Camera* add_cameralist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Camera >&
      cameralist() const;
  // optional int32 clientId = 1;
  bool has_clientid() const;
  void clear_clientid() ;
  ::int32_t clientid() const;
  void set_clientid(::int32_t value);

  private:
  ::int32_t _internal_clientid() const;
  void _internal_set_clientid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sspkg.RegisterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Camera > cameralist_;
    ::int32_t clientid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Frame& from) {
    Frame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawBufferFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kChannelFieldNumber = 4,
  };
  // optional bytes rawBuffer = 1;
  bool has_rawbuffer() const;
  void clear_rawbuffer() ;
  const std::string& rawbuffer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rawbuffer(Arg_&& arg, Args_... args);
  std::string* mutable_rawbuffer();
  PROTOBUF_NODISCARD std::string* release_rawbuffer();
  void set_allocated_rawbuffer(std::string* ptr);

  private:
  const std::string& _internal_rawbuffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rawbuffer(
      const std::string& value);
  std::string* _internal_mutable_rawbuffer();

  public:
  // optional int32 height = 2;
  bool has_height() const;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // optional int32 width = 3;
  bool has_width() const;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // optional int64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional int32 channel = 4;
  bool has_channel() const;
  void clear_channel() ;
  ::int32_t channel() const;
  void set_channel(::int32_t value);

  private:
  ::int32_t _internal_channel() const;
  void _internal_set_channel(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sspkg.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawbuffer_;
    ::int32_t height_;
    ::int32_t width_;
    ::int64_t timestamp_;
    ::int32_t channel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};// -------------------------------------------------------------------

class Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  ~Configuration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Configuration& from) {
    Configuration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kResolutionFieldNumber = 2,
    kCameraStateFieldNumber = 3,
    kCaptureModeFieldNumber = 4,
  };
  // optional string cameraId = 1;
  bool has_cameraid() const;
  void clear_cameraid() ;
  const std::string& cameraid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameraid(Arg_&& arg, Args_... args);
  std::string* mutable_cameraid();
  PROTOBUF_NODISCARD std::string* release_cameraid();
  void set_allocated_cameraid(std::string* ptr);

  private:
  const std::string& _internal_cameraid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraid(
      const std::string& value);
  std::string* _internal_mutable_cameraid();

  public:
  // optional string resolution = 2;
  bool has_resolution() const;
  void clear_resolution() ;
  const std::string& resolution() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolution(Arg_&& arg, Args_... args);
  std::string* mutable_resolution();
  PROTOBUF_NODISCARD std::string* release_resolution();
  void set_allocated_resolution(std::string* ptr);

  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(
      const std::string& value);
  std::string* _internal_mutable_resolution();

  public:
  // optional bool cameraState = 3;
  bool has_camerastate() const;
  void clear_camerastate() ;
  bool camerastate() const;
  void set_camerastate(bool value);

  private:
  bool _internal_camerastate() const;
  void _internal_set_camerastate(bool value);

  public:
  // optional .sspkg.CaptureMode captureMode = 4;
  bool has_capturemode() const;
  void clear_capturemode() ;
  ::sspkg::CaptureMode capturemode() const;
  void set_capturemode(::sspkg::CaptureMode value);

  private:
  ::sspkg::CaptureMode _internal_capturemode() const;
  void _internal_set_capturemode(::sspkg::CaptureMode value);

  public:
  // @@protoc_insertion_point(class_scope:sspkg.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
    bool camerastate_;
    int capturemode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sspkg.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sspkg.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
    kDatalenFieldNumber = 2,
  };
  // optional int32 response = 1;
  bool has_response() const;
  void clear_response() ;
  ::int32_t response() const;
  void set_response(::int32_t value);

  private:
  ::int32_t _internal_response() const;
  void _internal_set_response(::int32_t value);

  public:
  // optional int32 datalen = 2;
  bool has_datalen() const;
  void clear_datalen() ;
  ::int32_t datalen() const;
  void set_datalen(::int32_t value);

  private:
  ::int32_t _internal_datalen() const;
  void _internal_set_datalen(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sspkg.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t response_;
    ::int32_t datalen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensorsharing_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Configurations

// repeated .sspkg.Configuration conf = 1;
inline int Configurations::_internal_conf_size() const {
  return _impl_.conf_.size();
}
inline int Configurations::conf_size() const {
  return _internal_conf_size();
}
inline void Configurations::clear_conf() {
  _internal_mutable_conf()->Clear();
}
inline ::sspkg::Configuration* Configurations::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:sspkg.Configurations.conf)
  return _internal_mutable_conf()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Configuration >*
Configurations::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:sspkg.Configurations.conf)
  return _internal_mutable_conf();
}
inline const ::sspkg::Configuration& Configurations::_internal_conf(int index) const {
  return _internal_conf().Get(index);
}
inline const ::sspkg::Configuration& Configurations::conf(int index) const {
  // @@protoc_insertion_point(field_get:sspkg.Configurations.conf)
  return _internal_conf(index);
}
inline ::sspkg::Configuration* Configurations::_internal_add_conf() {
  return _internal_mutable_conf()->Add();
}
inline ::sspkg::Configuration* Configurations::add_conf() {
  ::sspkg::Configuration* _add = _internal_add_conf();
  // @@protoc_insertion_point(field_add:sspkg.Configurations.conf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Configuration >&
Configurations::conf() const {
  // @@protoc_insertion_point(field_list:sspkg.Configurations.conf)
  return _internal_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Configuration>&
Configurations::_internal_conf() const {
  return _impl_.conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Configuration>*
Configurations::_internal_mutable_conf() {
  return &_impl_.conf_;
}

// -------------------------------------------------------------------

// Request

// optional int32 clientId = 1;
inline bool Request::has_clientid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Request::clear_clientid() {
  _impl_.clientid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Request::clientid() const {
  // @@protoc_insertion_point(field_get:sspkg.Request.clientId)
  return _internal_clientid();
}
inline void Request::set_clientid(::int32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:sspkg.Request.clientId)
}
inline ::int32_t Request::_internal_clientid() const {
  return _impl_.clientid_;
}
inline void Request::_internal_set_clientid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.clientid_ = value;
}

// optional string cameraId = 2;
inline bool Request::has_cameraid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Request::clear_cameraid() {
  _impl_.cameraid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::cameraid() const {
  // @@protoc_insertion_point(field_get:sspkg.Request.cameraId)
  return _internal_cameraid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_cameraid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cameraid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Request.cameraId)
}
inline std::string* Request::mutable_cameraid() {
  std::string* _s = _internal_mutable_cameraid();
  // @@protoc_insertion_point(field_mutable:sspkg.Request.cameraId)
  return _s;
}
inline const std::string& Request::_internal_cameraid() const {
  return _impl_.cameraid_.Get();
}
inline void Request::_internal_set_cameraid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cameraid_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_cameraid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cameraid_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_cameraid() {
  // @@protoc_insertion_point(field_release:sspkg.Request.cameraId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cameraid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Request::set_allocated_cameraid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cameraid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameraid_.IsDefault()) {
          _impl_.cameraid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Request.cameraId)
}

// optional .sspkg.Configurations configlist = 3;
inline bool Request::has_configlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.configlist_ != nullptr);
  return value;
}
inline void Request::clear_configlist() {
  if (_impl_.configlist_ != nullptr) _impl_.configlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sspkg::Configurations& Request::_internal_configlist() const {
  const ::sspkg::Configurations* p = _impl_.configlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::sspkg::Configurations&>(
      ::sspkg::_Configurations_default_instance_);
}
inline const ::sspkg::Configurations& Request::configlist() const {
  // @@protoc_insertion_point(field_get:sspkg.Request.configlist)
  return _internal_configlist();
}
inline void Request::unsafe_arena_set_allocated_configlist(
    ::sspkg::Configurations* configlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.configlist_);
  }
  _impl_.configlist_ = configlist;
  if (configlist) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sspkg.Request.configlist)
}
inline ::sspkg::Configurations* Request::release_configlist() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sspkg::Configurations* temp = _impl_.configlist_;
  _impl_.configlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sspkg::Configurations* Request::unsafe_arena_release_configlist() {
  // @@protoc_insertion_point(field_release:sspkg.Request.configlist)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sspkg::Configurations* temp = _impl_.configlist_;
  _impl_.configlist_ = nullptr;
  return temp;
}
inline ::sspkg::Configurations* Request::_internal_mutable_configlist() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.configlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::sspkg::Configurations>(GetArenaForAllocation());
    _impl_.configlist_ = p;
  }
  return _impl_.configlist_;
}
inline ::sspkg::Configurations* Request::mutable_configlist() {
  ::sspkg::Configurations* _msg = _internal_mutable_configlist();
  // @@protoc_insertion_point(field_mutable:sspkg.Request.configlist)
  return _msg;
}
inline void Request::set_allocated_configlist(::sspkg::Configurations* configlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.configlist_;
  }
  if (configlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(configlist);
    if (message_arena != submessage_arena) {
      configlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.configlist_ = configlist;
  // @@protoc_insertion_point(field_set_allocated:sspkg.Request.configlist)
}

// -------------------------------------------------------------------

// Camera

// optional string cameraId = 1;
inline bool Camera::has_cameraid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Camera::clear_cameraid() {
  _impl_.cameraid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Camera::cameraid() const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.cameraId)
  return _internal_cameraid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Camera::set_cameraid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cameraid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Camera.cameraId)
}
inline std::string* Camera::mutable_cameraid() {
  std::string* _s = _internal_mutable_cameraid();
  // @@protoc_insertion_point(field_mutable:sspkg.Camera.cameraId)
  return _s;
}
inline const std::string& Camera::_internal_cameraid() const {
  return _impl_.cameraid_.Get();
}
inline void Camera::_internal_set_cameraid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cameraid_.Set(value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cameraid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cameraid_.Mutable( GetArenaForAllocation());
}
inline std::string* Camera::release_cameraid() {
  // @@protoc_insertion_point(field_release:sspkg.Camera.cameraId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cameraid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Camera::set_allocated_cameraid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cameraid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameraid_.IsDefault()) {
          _impl_.cameraid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Camera.cameraId)
}

// optional string cameraName = 2;
inline bool Camera::has_cameraname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Camera::clear_cameraname() {
  _impl_.cameraname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Camera::cameraname() const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.cameraName)
  return _internal_cameraname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Camera::set_cameraname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cameraname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Camera.cameraName)
}
inline std::string* Camera::mutable_cameraname() {
  std::string* _s = _internal_mutable_cameraname();
  // @@protoc_insertion_point(field_mutable:sspkg.Camera.cameraName)
  return _s;
}
inline const std::string& Camera::_internal_cameraname() const {
  return _impl_.cameraname_.Get();
}
inline void Camera::_internal_set_cameraname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.cameraname_.Set(value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cameraname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cameraname_.Mutable( GetArenaForAllocation());
}
inline std::string* Camera::release_cameraname() {
  // @@protoc_insertion_point(field_release:sspkg.Camera.cameraName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.cameraname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Camera::set_allocated_cameraname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cameraname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameraname_.IsDefault()) {
          _impl_.cameraname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Camera.cameraName)
}

// optional int32 pixel = 3;
inline bool Camera::has_pixel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Camera::clear_pixel() {
  _impl_.pixel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Camera::pixel() const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.pixel)
  return _internal_pixel();
}
inline void Camera::set_pixel(::int32_t value) {
  _internal_set_pixel(value);
  // @@protoc_insertion_point(field_set:sspkg.Camera.pixel)
}
inline ::int32_t Camera::_internal_pixel() const {
  return _impl_.pixel_;
}
inline void Camera::_internal_set_pixel(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pixel_ = value;
}

// repeated string resolutions = 4;
inline int Camera::_internal_resolutions_size() const {
  return _impl_.resolutions_.size();
}
inline int Camera::resolutions_size() const {
  return _internal_resolutions_size();
}
inline void Camera::clear_resolutions() {
  _internal_mutable_resolutions()->Clear();
}
inline std::string* Camera::add_resolutions() {
  std::string* _s = _internal_add_resolutions();
  // @@protoc_insertion_point(field_add_mutable:sspkg.Camera.resolutions)
  return _s;
}
inline const std::string& Camera::resolutions(int index) const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.resolutions)
  return _internal_resolutions(index);
}
inline std::string* Camera::mutable_resolutions(int index) {
  // @@protoc_insertion_point(field_mutable:sspkg.Camera.resolutions)
  return _internal_mutable_resolutions()->Mutable(index);
}
inline void Camera::set_resolutions(int index, const std::string& value) {
  _internal_mutable_resolutions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sspkg.Camera.resolutions)
}
inline void Camera::set_resolutions(int index, std::string&& value) {
  _internal_mutable_resolutions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sspkg.Camera.resolutions)
}
inline void Camera::set_resolutions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_resolutions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sspkg.Camera.resolutions)
}
inline void Camera::set_resolutions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_resolutions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sspkg.Camera.resolutions)
}
inline void Camera::set_resolutions(int index, absl::string_view value) {
  _internal_mutable_resolutions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sspkg.Camera.resolutions)
}
inline void Camera::add_resolutions(const std::string& value) {
  _internal_mutable_resolutions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sspkg.Camera.resolutions)
}
inline void Camera::add_resolutions(std::string&& value) {
  _internal_mutable_resolutions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sspkg.Camera.resolutions)
}
inline void Camera::add_resolutions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_resolutions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sspkg.Camera.resolutions)
}
inline void Camera::add_resolutions(const char* value, std::size_t size) {
  _internal_mutable_resolutions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sspkg.Camera.resolutions)
}
inline void Camera::add_resolutions(absl::string_view value) {
  _internal_mutable_resolutions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sspkg.Camera.resolutions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Camera::resolutions() const {
  // @@protoc_insertion_point(field_list:sspkg.Camera.resolutions)
  return _internal_resolutions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Camera::mutable_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:sspkg.Camera.resolutions)
  return _internal_mutable_resolutions();
}
inline const std::string& Camera::_internal_resolutions(int index) const {
  return _internal_resolutions().Get(index);
}
inline std::string* Camera::_internal_add_resolutions() {
  return _internal_mutable_resolutions()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Camera::_internal_resolutions() const {
  return _impl_.resolutions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Camera::_internal_mutable_resolutions() {
  return &_impl_.resolutions_;
}

// optional int32 frameRate = 5;
inline bool Camera::has_framerate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Camera::clear_framerate() {
  _impl_.framerate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Camera::framerate() const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.frameRate)
  return _internal_framerate();
}
inline void Camera::set_framerate(::int32_t value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:sspkg.Camera.frameRate)
}
inline ::int32_t Camera::_internal_framerate() const {
  return _impl_.framerate_;
}
inline void Camera::_internal_set_framerate(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.framerate_ = value;
}

// optional string sensorSize = 6;
inline bool Camera::has_sensorsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Camera::clear_sensorsize() {
  _impl_.sensorsize_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Camera::sensorsize() const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.sensorSize)
  return _internal_sensorsize();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Camera::set_sensorsize(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sensorsize_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Camera.sensorSize)
}
inline std::string* Camera::mutable_sensorsize() {
  std::string* _s = _internal_mutable_sensorsize();
  // @@protoc_insertion_point(field_mutable:sspkg.Camera.sensorSize)
  return _s;
}
inline const std::string& Camera::_internal_sensorsize() const {
  return _impl_.sensorsize_.Get();
}
inline void Camera::_internal_set_sensorsize(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.sensorsize_.Set(value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_sensorsize() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.sensorsize_.Mutable( GetArenaForAllocation());
}
inline std::string* Camera::release_sensorsize() {
  // @@protoc_insertion_point(field_release:sspkg.Camera.sensorSize)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.sensorsize_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensorsize_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Camera::set_allocated_sensorsize(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sensorsize_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sensorsize_.IsDefault()) {
          _impl_.sensorsize_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Camera.sensorSize)
}

// optional int32 fov = 7;
inline bool Camera::has_fov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Camera::clear_fov() {
  _impl_.fov_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Camera::fov() const {
  // @@protoc_insertion_point(field_get:sspkg.Camera.fov)
  return _internal_fov();
}
inline void Camera::set_fov(::int32_t value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:sspkg.Camera.fov)
}
inline ::int32_t Camera::_internal_fov() const {
  return _impl_.fov_;
}
inline void Camera::_internal_set_fov(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.fov_ = value;
}

// -------------------------------------------------------------------

// RegisterInfo

// optional int32 clientId = 1;
inline bool RegisterInfo::has_clientid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RegisterInfo::clear_clientid() {
  _impl_.clientid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t RegisterInfo::clientid() const {
  // @@protoc_insertion_point(field_get:sspkg.RegisterInfo.clientId)
  return _internal_clientid();
}
inline void RegisterInfo::set_clientid(::int32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:sspkg.RegisterInfo.clientId)
}
inline ::int32_t RegisterInfo::_internal_clientid() const {
  return _impl_.clientid_;
}
inline void RegisterInfo::_internal_set_clientid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clientid_ = value;
}

// repeated .sspkg.Camera cameraList = 2;
inline int RegisterInfo::_internal_cameralist_size() const {
  return _impl_.cameralist_.size();
}
inline int RegisterInfo::cameralist_size() const {
  return _internal_cameralist_size();
}
inline void RegisterInfo::clear_cameralist() {
  _internal_mutable_cameralist()->Clear();
}
inline ::sspkg::Camera* RegisterInfo::mutable_cameralist(int index) {
  // @@protoc_insertion_point(field_mutable:sspkg.RegisterInfo.cameraList)
  return _internal_mutable_cameralist()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Camera >*
RegisterInfo::mutable_cameralist() {
  // @@protoc_insertion_point(field_mutable_list:sspkg.RegisterInfo.cameraList)
  return _internal_mutable_cameralist();
}
inline const ::sspkg::Camera& RegisterInfo::_internal_cameralist(int index) const {
  return _internal_cameralist().Get(index);
}
inline const ::sspkg::Camera& RegisterInfo::cameralist(int index) const {
  // @@protoc_insertion_point(field_get:sspkg.RegisterInfo.cameraList)
  return _internal_cameralist(index);
}
inline ::sspkg::Camera* RegisterInfo::_internal_add_cameralist() {
  return _internal_mutable_cameralist()->Add();
}
inline ::sspkg::Camera* RegisterInfo::add_cameralist() {
  ::sspkg::Camera* _add = _internal_add_cameralist();
  // @@protoc_insertion_point(field_add:sspkg.RegisterInfo.cameraList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sspkg::Camera >&
RegisterInfo::cameralist() const {
  // @@protoc_insertion_point(field_list:sspkg.RegisterInfo.cameraList)
  return _internal_cameralist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Camera>&
RegisterInfo::_internal_cameralist() const {
  return _impl_.cameralist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sspkg::Camera>*
RegisterInfo::_internal_mutable_cameralist() {
  return &_impl_.cameralist_;
}

// -------------------------------------------------------------------

// Frame

// optional bytes rawBuffer = 1;
inline bool Frame::has_rawbuffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Frame::clear_rawbuffer() {
  _impl_.rawbuffer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Frame::rawbuffer() const {
  // @@protoc_insertion_point(field_get:sspkg.Frame.rawBuffer)
  return _internal_rawbuffer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Frame::set_rawbuffer(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rawbuffer_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Frame.rawBuffer)
}
inline std::string* Frame::mutable_rawbuffer() {
  std::string* _s = _internal_mutable_rawbuffer();
  // @@protoc_insertion_point(field_mutable:sspkg.Frame.rawBuffer)
  return _s;
}
inline const std::string& Frame::_internal_rawbuffer() const {
  return _impl_.rawbuffer_.Get();
}
inline void Frame::_internal_set_rawbuffer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.rawbuffer_.Set(value, GetArenaForAllocation());
}
inline std::string* Frame::_internal_mutable_rawbuffer() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rawbuffer_.Mutable( GetArenaForAllocation());
}
inline std::string* Frame::release_rawbuffer() {
  // @@protoc_insertion_point(field_release:sspkg.Frame.rawBuffer)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.rawbuffer_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rawbuffer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Frame::set_allocated_rawbuffer(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rawbuffer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rawbuffer_.IsDefault()) {
          _impl_.rawbuffer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Frame.rawBuffer)
}

// optional int32 height = 2;
inline bool Frame::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Frame::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Frame::height() const {
  // @@protoc_insertion_point(field_get:sspkg.Frame.height)
  return _internal_height();
}
inline void Frame::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sspkg.Frame.height)
}
inline ::int32_t Frame::_internal_height() const {
  return _impl_.height_;
}
inline void Frame::_internal_set_height(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.height_ = value;
}

// optional int32 width = 3;
inline bool Frame::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Frame::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Frame::width() const {
  // @@protoc_insertion_point(field_get:sspkg.Frame.width)
  return _internal_width();
}
inline void Frame::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sspkg.Frame.width)
}
inline ::int32_t Frame::_internal_width() const {
  return _impl_.width_;
}
inline void Frame::_internal_set_width(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}

// optional int32 channel = 4;
inline bool Frame::has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Frame::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Frame::channel() const {
  // @@protoc_insertion_point(field_get:sspkg.Frame.channel)
  return _internal_channel();
}
inline void Frame::set_channel(::int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:sspkg.Frame.channel)
}
inline ::int32_t Frame::_internal_channel() const {
  return _impl_.channel_;
}
inline void Frame::_internal_set_channel(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.channel_ = value;
}

// optional int64 timestamp = 5;
inline bool Frame::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Frame::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:sspkg.Frame.timestamp)
  return _internal_timestamp();
}
inline void Frame::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sspkg.Frame.timestamp)
}
inline ::int64_t Frame::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void Frame::_internal_set_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// Configuration

// optional string cameraId = 1;
inline bool Configuration::has_cameraid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Configuration::clear_cameraid() {
  _impl_.cameraid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Configuration::cameraid() const {
  // @@protoc_insertion_point(field_get:sspkg.Configuration.cameraId)
  return _internal_cameraid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Configuration::set_cameraid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cameraid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Configuration.cameraId)
}
inline std::string* Configuration::mutable_cameraid() {
  std::string* _s = _internal_mutable_cameraid();
  // @@protoc_insertion_point(field_mutable:sspkg.Configuration.cameraId)
  return _s;
}
inline const std::string& Configuration::_internal_cameraid() const {
  return _impl_.cameraid_.Get();
}
inline void Configuration::_internal_set_cameraid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cameraid_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_cameraid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cameraid_.Mutable( GetArenaForAllocation());
}
inline std::string* Configuration::release_cameraid() {
  // @@protoc_insertion_point(field_release:sspkg.Configuration.cameraId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cameraid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Configuration::set_allocated_cameraid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cameraid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameraid_.IsDefault()) {
          _impl_.cameraid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Configuration.cameraId)
}

// optional string resolution = 2;
inline bool Configuration::has_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Configuration::clear_resolution() {
  _impl_.resolution_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Configuration::resolution() const {
  // @@protoc_insertion_point(field_get:sspkg.Configuration.resolution)
  return _internal_resolution();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Configuration::set_resolution(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.resolution_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sspkg.Configuration.resolution)
}
inline std::string* Configuration::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:sspkg.Configuration.resolution)
  return _s;
}
inline const std::string& Configuration::_internal_resolution() const {
  return _impl_.resolution_.Get();
}
inline void Configuration::_internal_set_resolution(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.resolution_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_resolution() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.resolution_.Mutable( GetArenaForAllocation());
}
inline std::string* Configuration::release_resolution() {
  // @@protoc_insertion_point(field_release:sspkg.Configuration.resolution)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.resolution_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Configuration::set_allocated_resolution(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.resolution_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.resolution_.IsDefault()) {
          _impl_.resolution_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sspkg.Configuration.resolution)
}

// optional bool cameraState = 3;
inline bool Configuration::has_camerastate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Configuration::clear_camerastate() {
  _impl_.camerastate_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Configuration::camerastate() const {
  // @@protoc_insertion_point(field_get:sspkg.Configuration.cameraState)
  return _internal_camerastate();
}
inline void Configuration::set_camerastate(bool value) {
  _internal_set_camerastate(value);
  // @@protoc_insertion_point(field_set:sspkg.Configuration.cameraState)
}
inline bool Configuration::_internal_camerastate() const {
  return _impl_.camerastate_;
}
inline void Configuration::_internal_set_camerastate(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.camerastate_ = value;
}

// optional .sspkg.CaptureMode captureMode = 4;
inline bool Configuration::has_capturemode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Configuration::clear_capturemode() {
  _impl_.capturemode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::sspkg::CaptureMode Configuration::capturemode() const {
  // @@protoc_insertion_point(field_get:sspkg.Configuration.captureMode)
  return _internal_capturemode();
}
inline void Configuration::set_capturemode(::sspkg::CaptureMode value) {
   _internal_set_capturemode(value);
  // @@protoc_insertion_point(field_set:sspkg.Configuration.captureMode)
}
inline ::sspkg::CaptureMode Configuration::_internal_capturemode() const {
  return static_cast<::sspkg::CaptureMode>(_impl_.capturemode_);
}
inline void Configuration::_internal_set_capturemode(::sspkg::CaptureMode value) {
  assert(::sspkg::CaptureMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.capturemode_ = value;
}

// -------------------------------------------------------------------

// Response

// optional int32 response = 1;
inline bool Response::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Response::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Response::response() const {
  // @@protoc_insertion_point(field_get:sspkg.Response.response)
  return _internal_response();
}
inline void Response::set_response(::int32_t value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:sspkg.Response.response)
}
inline ::int32_t Response::_internal_response() const {
  return _impl_.response_;
}
inline void Response::_internal_set_response(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}

// optional int32 datalen = 2;
inline bool Response::has_datalen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Response::clear_datalen() {
  _impl_.datalen_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Response::datalen() const {
  // @@protoc_insertion_point(field_get:sspkg.Response.datalen)
  return _internal_datalen();
}
inline void Response::set_datalen(::int32_t value) {
  _internal_set_datalen(value);
  // @@protoc_insertion_point(field_set:sspkg.Response.datalen)
}
inline ::int32_t Response::_internal_datalen() const {
  return _impl_.datalen_;
}
inline void Response::_internal_set_datalen(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.datalen_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sspkg


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::sspkg::CaptureMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::sspkg::CaptureMode>() {
  return ::sspkg::CaptureMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensorsharing_2eproto_2epb_2eh
