// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensorsharing.proto
#ifndef GRPC_sensorsharing_2eproto__INCLUDED
#define GRPC_sensorsharing_2eproto__INCLUDED

#include "sensorsharing.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sspkg {

// ---- services section ---- //
class SensorSharing final {
 public:
  static constexpr char const* service_full_name() {
    return "sspkg.SensorSharing";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status register_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::RegisterInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::RegisterInfo>> Asyncregister_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::RegisterInfo>>(Asyncregister_Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::RegisterInfo>> PrepareAsyncregister_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::RegisterInfo>>(PrepareAsyncregister_Raw(context, request, cq));
    }
    virtual ::grpc::Status captureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Frame* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Frame>> AsynccaptureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Frame>>(AsynccaptureImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Frame>> PrepareAsynccaptureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Frame>>(PrepareAsynccaptureImageRaw(context, request, cq));
    }
    virtual ::grpc::Status getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Configurations* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Configurations>> AsyncgetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Configurations>>(AsyncgetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Configurations>> PrepareAsyncgetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Configurations>>(PrepareAsyncgetConfigurationRaw(context, request, cq));
    }
    virtual ::grpc::Status setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> AsyncsetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(AsyncsetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> PrepareAsyncsetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(PrepareAsyncsetConfigurationRaw(context, request, cq));
    }
    virtual ::grpc::Status toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> AsynctoggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(AsynctoggleCameraStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> PrepareAsynctoggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(PrepareAsynctoggleCameraStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sspkg::Frame>> startStream(::grpc::ClientContext* context, const ::sspkg::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sspkg::Frame>>(startStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sspkg::Frame>> AsyncstartStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sspkg::Frame>>(AsyncstartStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sspkg::Frame>> PrepareAsyncstartStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sspkg::Frame>>(PrepareAsyncstartStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status stopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> AsyncstopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(AsyncstopStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> PrepareAsyncstopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(PrepareAsyncstopStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status deregister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> Asyncderegister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(AsyncderegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>> PrepareAsyncderegister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>>(PrepareAsyncderegisterRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void register_(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void register_(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void captureImage(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response, std::function<void(::grpc::Status)>) = 0;
      virtual void captureImage(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void startStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::grpc::ClientReadReactor< ::sspkg::Frame>* reactor) = 0;
      virtual void stopStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deregister(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deregister(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::RegisterInfo>* Asyncregister_Raw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::RegisterInfo>* PrepareAsyncregister_Raw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Frame>* AsynccaptureImageRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Frame>* PrepareAsynccaptureImageRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Configurations>* AsyncgetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Configurations>* PrepareAsyncgetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* AsyncsetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* PrepareAsyncsetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* AsynctoggleCameraStateRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* PrepareAsynctoggleCameraStateRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sspkg::Frame>* startStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sspkg::Frame>* AsyncstartStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sspkg::Frame>* PrepareAsyncstartStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* AsyncstopStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* PrepareAsyncstopStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* AsyncderegisterRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sspkg::Response>* PrepareAsyncderegisterRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status register_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::RegisterInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>> Asyncregister_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>>(Asyncregister_Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>> PrepareAsyncregister_(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>>(PrepareAsyncregister_Raw(context, request, cq));
    }
    ::grpc::Status captureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Frame* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Frame>> AsynccaptureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Frame>>(AsynccaptureImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Frame>> PrepareAsynccaptureImage(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Frame>>(PrepareAsynccaptureImageRaw(context, request, cq));
    }
    ::grpc::Status getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Configurations* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>> AsyncgetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>>(AsyncgetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>> PrepareAsyncgetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>>(PrepareAsyncgetConfigurationRaw(context, request, cq));
    }
    ::grpc::Status setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> AsyncsetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(AsyncsetConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> PrepareAsyncsetConfiguration(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(PrepareAsyncsetConfigurationRaw(context, request, cq));
    }
    ::grpc::Status toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> AsynctoggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(AsynctoggleCameraStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> PrepareAsynctoggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(PrepareAsynctoggleCameraStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sspkg::Frame>> startStream(::grpc::ClientContext* context, const ::sspkg::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sspkg::Frame>>(startStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sspkg::Frame>> AsyncstartStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sspkg::Frame>>(AsyncstartStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sspkg::Frame>> PrepareAsyncstartStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sspkg::Frame>>(PrepareAsyncstartStreamRaw(context, request, cq));
    }
    ::grpc::Status stopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> AsyncstopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(AsyncstopStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> PrepareAsyncstopStream(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(PrepareAsyncstopStreamRaw(context, request, cq));
    }
    ::grpc::Status deregister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::sspkg::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> Asyncderegister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(AsyncderegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>> PrepareAsyncderegister(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sspkg::Response>>(PrepareAsyncderegisterRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void register_(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response, std::function<void(::grpc::Status)>) override;
      void register_(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void captureImage(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response, std::function<void(::grpc::Status)>) override;
      void captureImage(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response, std::function<void(::grpc::Status)>) override;
      void getConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) override;
      void setConfiguration(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) override;
      void toggleCameraState(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void startStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::grpc::ClientReadReactor< ::sspkg::Frame>* reactor) override;
      void stopStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) override;
      void stopStream(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deregister(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, std::function<void(::grpc::Status)>) override;
      void deregister(::grpc::ClientContext* context, const ::sspkg::Request* request, ::sspkg::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>* Asyncregister_Raw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::RegisterInfo>* PrepareAsyncregister_Raw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Frame>* AsynccaptureImageRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Frame>* PrepareAsynccaptureImageRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>* AsyncgetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Configurations>* PrepareAsyncgetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* AsyncsetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* PrepareAsyncsetConfigurationRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* AsynctoggleCameraStateRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* PrepareAsynctoggleCameraStateRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sspkg::Frame>* startStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request) override;
    ::grpc::ClientAsyncReader< ::sspkg::Frame>* AsyncstartStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sspkg::Frame>* PrepareAsyncstartStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* AsyncstopStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* PrepareAsyncstopStreamRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* AsyncderegisterRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sspkg::Response>* PrepareAsyncderegisterRaw(::grpc::ClientContext* context, const ::sspkg::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_register__;
    const ::grpc::internal::RpcMethod rpcmethod_captureImage_;
    const ::grpc::internal::RpcMethod rpcmethod_getConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_setConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_toggleCameraState_;
    const ::grpc::internal::RpcMethod rpcmethod_startStream_;
    const ::grpc::internal::RpcMethod rpcmethod_stopStream_;
    const ::grpc::internal::RpcMethod rpcmethod_deregister_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status register_(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response);
    virtual ::grpc::Status captureImage(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response);
    virtual ::grpc::Status getConfiguration(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response);
    virtual ::grpc::Status setConfiguration(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response);
    virtual ::grpc::Status toggleCameraState(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response);
    virtual ::grpc::Status startStream(::grpc::ServerContext* context, const ::sspkg::Request* request, ::grpc::ServerWriter< ::sspkg::Frame>* writer);
    virtual ::grpc::Status stopStream(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response);
    virtual ::grpc::Status deregister(::grpc::ServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_register_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_register_() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_register_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::RegisterInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_captureImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_captureImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_captureImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status captureImage(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcaptureImage(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::Frame>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConfiguration() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConfiguration(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::Configurations>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setConfiguration() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetConfiguration(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_toggleCameraState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_toggleCameraState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_toggleCameraState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status toggleCameraState(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttoggleCameraState(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_startStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_startStream() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_startStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::grpc::ServerWriter< ::sspkg::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartStream(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncWriter< ::sspkg::Frame>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stopStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stopStream() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_stopStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopStream(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deregister() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deregister(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestderegister(::grpc::ServerContext* context, ::sspkg::Request* request, ::grpc::ServerAsyncResponseWriter< ::sspkg::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_register_<WithAsyncMethod_captureImage<WithAsyncMethod_getConfiguration<WithAsyncMethod_setConfiguration<WithAsyncMethod_toggleCameraState<WithAsyncMethod_startStream<WithAsyncMethod_stopStream<WithAsyncMethod_deregister<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_register_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_register_() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::RegisterInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::RegisterInfo* response) { return this->register_(context, request, response); }));}
    void SetMessageAllocatorFor_register_(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::RegisterInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::RegisterInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_register_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* register_(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_captureImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_captureImage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Frame>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::Frame* response) { return this->captureImage(context, request, response); }));}
    void SetMessageAllocatorFor_captureImage(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::Frame>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Frame>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_captureImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status captureImage(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* captureImage(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getConfiguration() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Configurations>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::Configurations* response) { return this->getConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_getConfiguration(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::Configurations>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Configurations>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setConfiguration() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) { return this->setConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_setConfiguration(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_toggleCameraState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_toggleCameraState() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) { return this->toggleCameraState(context, request, response); }));}
    void SetMessageAllocatorFor_toggleCameraState(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_toggleCameraState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status toggleCameraState(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* toggleCameraState(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_startStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_startStream() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sspkg::Request, ::sspkg::Frame>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request) { return this->startStream(context, request); }));
    }
    ~WithCallbackMethod_startStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::grpc::ServerWriter< ::sspkg::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sspkg::Frame>* startStream(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stopStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stopStream() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) { return this->stopStream(context, request, response); }));}
    void SetMessageAllocatorFor_stopStream(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stopStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stopStream(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deregister() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sspkg::Request* request, ::sspkg::Response* response) { return this->deregister(context, request, response); }));}
    void SetMessageAllocatorFor_deregister(
        ::grpc::MessageAllocator< ::sspkg::Request, ::sspkg::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sspkg::Request, ::sspkg::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deregister(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deregister(
      ::grpc::CallbackServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_register_<WithCallbackMethod_captureImage<WithCallbackMethod_getConfiguration<WithCallbackMethod_setConfiguration<WithCallbackMethod_toggleCameraState<WithCallbackMethod_startStream<WithCallbackMethod_stopStream<WithCallbackMethod_deregister<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_register_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_register_() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_register_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_captureImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_captureImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_captureImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status captureImage(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConfiguration() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setConfiguration() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_toggleCameraState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_toggleCameraState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_toggleCameraState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status toggleCameraState(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_startStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_startStream() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_startStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::grpc::ServerWriter< ::sspkg::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stopStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stopStream() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_stopStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deregister() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deregister(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_register_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_register_() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_register_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_captureImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_captureImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_captureImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status captureImage(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcaptureImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConfiguration() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setConfiguration() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_setConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_toggleCameraState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_toggleCameraState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_toggleCameraState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status toggleCameraState(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttoggleCameraState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_startStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_startStream() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_startStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::grpc::ServerWriter< ::sspkg::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stopStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stopStream() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_stopStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deregister() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deregister(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestderegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_register_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_register_() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->register_(context, request, response); }));
    }
    ~WithRawCallbackMethod_register_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* register_(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_captureImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_captureImage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->captureImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_captureImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status captureImage(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* captureImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getConfiguration() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConfiguration(context, request, response); }));
    }
    ~WithRawCallbackMethod_getConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setConfiguration() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setConfiguration(context, request, response); }));
    }
    ~WithRawCallbackMethod_setConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_toggleCameraState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_toggleCameraState() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->toggleCameraState(context, request, response); }));
    }
    ~WithRawCallbackMethod_toggleCameraState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status toggleCameraState(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* toggleCameraState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_startStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_startStream() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->startStream(context, request); }));
    }
    ~WithRawCallbackMethod_startStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::grpc::ServerWriter< ::sspkg::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* startStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stopStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stopStream() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stopStream(context, request, response); }));
    }
    ~WithRawCallbackMethod_stopStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stopStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deregister() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deregister(context, request, response); }));
    }
    ~WithRawCallbackMethod_deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deregister(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deregister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_register_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_register_() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::RegisterInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::RegisterInfo>* streamer) {
                       return this->Streamedregister_(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_register_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status register_(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::RegisterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregister_(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::RegisterInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_captureImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_captureImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::Frame>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::Frame>* streamer) {
                       return this->StreamedcaptureImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_captureImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status captureImage(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Frame* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcaptureImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::Frame>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConfiguration() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::Configurations>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::Configurations>* streamer) {
                       return this->StreamedgetConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Configurations* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::Configurations>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setConfiguration() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::Response>* streamer) {
                       return this->StreamedsetConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setConfiguration(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_toggleCameraState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_toggleCameraState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::Response>* streamer) {
                       return this->StreamedtoggleCameraState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_toggleCameraState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status toggleCameraState(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedtoggleCameraState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stopStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stopStream() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::Response>* streamer) {
                       return this->StreamedstopStream(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stopStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stopStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstopStream(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deregister() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sspkg::Request, ::sspkg::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sspkg::Request, ::sspkg::Response>* streamer) {
                       return this->Streamedderegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deregister(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::sspkg::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedderegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sspkg::Request,::sspkg::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_register_<WithStreamedUnaryMethod_captureImage<WithStreamedUnaryMethod_getConfiguration<WithStreamedUnaryMethod_setConfiguration<WithStreamedUnaryMethod_toggleCameraState<WithStreamedUnaryMethod_stopStream<WithStreamedUnaryMethod_deregister<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_startStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_startStream() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sspkg::Request, ::sspkg::Frame>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sspkg::Request, ::sspkg::Frame>* streamer) {
                       return this->StreamedstartStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_startStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status startStream(::grpc::ServerContext* /*context*/, const ::sspkg::Request* /*request*/, ::grpc::ServerWriter< ::sspkg::Frame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedstartStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sspkg::Request,::sspkg::Frame>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_startStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_register_<WithStreamedUnaryMethod_captureImage<WithStreamedUnaryMethod_getConfiguration<WithStreamedUnaryMethod_setConfiguration<WithStreamedUnaryMethod_toggleCameraState<WithSplitStreamingMethod_startStream<WithStreamedUnaryMethod_stopStream<WithStreamedUnaryMethod_deregister<Service > > > > > > > > StreamedService;
};

}  // namespace sspkg


#endif  // GRPC_sensorsharing_2eproto__INCLUDED
