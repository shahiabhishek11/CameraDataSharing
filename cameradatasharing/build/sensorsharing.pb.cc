// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorsharing.proto

#include "sensorsharing.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sspkg {
template <typename>
PROTOBUF_CONSTEXPR Configurations::Configurations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conf_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigurationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationsDefaultTypeInternal() {}
  union {
    Configurations _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationsDefaultTypeInternal _Configurations_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cameraid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.configlist_)*/nullptr
  , /*decltype(_impl_.clientid_)*/ 0
} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Camera::Camera(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.resolutions_)*/{}
  , /*decltype(_impl_.cameraid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cameraname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sensorsize_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pixel_)*/ 0

  , /*decltype(_impl_.framerate_)*/ 0

  , /*decltype(_impl_.fov_)*/ 0
} {}
struct CameraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDefaultTypeInternal _Camera_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RegisterInfo::RegisterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cameralist_)*/{}
  , /*decltype(_impl_.clientid_)*/ 0
} {}
struct RegisterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterInfoDefaultTypeInternal() {}
  union {
    RegisterInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Frame::Frame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rawbuffer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.channel_)*/ 0
} {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Configuration::Configuration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cameraid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resolution_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.camerastate_)*/ false

  , /*decltype(_impl_.capturemode_)*/ 0
} {}
struct ConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {
    Configuration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationDefaultTypeInternal _Configuration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/ 0

  , /*decltype(_impl_.datalen_)*/ 0
} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace sspkg
static ::_pb::Metadata file_level_metadata_sensorsharing_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sensorsharing_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensorsharing_2eproto = nullptr;
const ::uint32_t TableStruct_sensorsharing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sspkg::Configurations, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::Configurations, _impl_.conf_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Request, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::Request, _impl_.clientid_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Request, _impl_.cameraid_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Request, _impl_.configlist_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.cameraid_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.cameraname_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.pixel_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.resolutions_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.framerate_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.sensorsize_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Camera, _impl_.fov_),
    0,
    1,
    3,
    ~0u,
    4,
    2,
    5,
    PROTOBUF_FIELD_OFFSET(::sspkg::RegisterInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sspkg::RegisterInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::RegisterInfo, _impl_.clientid_),
    PROTOBUF_FIELD_OFFSET(::sspkg::RegisterInfo, _impl_.cameralist_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _impl_.rawbuffer_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Frame, _impl_.timestamp_),
    0,
    1,
    2,
    4,
    3,
    PROTOBUF_FIELD_OFFSET(::sspkg::Configuration, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Configuration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::Configuration, _impl_.cameraid_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Configuration, _impl_.resolution_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Configuration, _impl_.camerastate_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Configuration, _impl_.capturemode_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::sspkg::Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sspkg::Response, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::sspkg::Response, _impl_.datalen_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::sspkg::Configurations)},
        { 9, 20, -1, sizeof(::sspkg::Request)},
        { 23, 38, -1, sizeof(::sspkg::Camera)},
        { 45, 55, -1, sizeof(::sspkg::RegisterInfo)},
        { 57, 70, -1, sizeof(::sspkg::Frame)},
        { 75, 87, -1, sizeof(::sspkg::Configuration)},
        { 91, 101, -1, sizeof(::sspkg::Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sspkg::_Configurations_default_instance_._instance,
    &::sspkg::_Request_default_instance_._instance,
    &::sspkg::_Camera_default_instance_._instance,
    &::sspkg::_RegisterInfo_default_instance_._instance,
    &::sspkg::_Frame_default_instance_._instance,
    &::sspkg::_Configuration_default_instance_._instance,
    &::sspkg::_Response_default_instance_._instance,
};
const char descriptor_table_protodef_sensorsharing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023sensorsharing.proto\022\005sspkg\"4\n\016Configur"
    "ations\022\"\n\004conf\030\001 \003(\0132\024.sspkg.Configurati"
    "on\"X\n\007Request\022\020\n\010clientId\030\001 \001(\005\022\020\n\010camer"
    "aId\030\002 \001(\t\022)\n\nconfiglist\030\003 \001(\0132\025.sspkg.Co"
    "nfigurations\"\206\001\n\006Camera\022\020\n\010cameraId\030\001 \001("
    "\t\022\022\n\ncameraName\030\002 \001(\t\022\r\n\005pixel\030\003 \001(\005\022\023\n\013"
    "resolutions\030\004 \003(\t\022\021\n\tframeRate\030\005 \001(\005\022\022\n\n"
    "sensorSize\030\006 \001(\t\022\013\n\003fov\030\007 \001(\005\"C\n\014Registe"
    "rInfo\022\020\n\010clientId\030\001 \001(\005\022!\n\ncameraList\030\002 "
    "\003(\0132\r.sspkg.Camera\"]\n\005Frame\022\021\n\trawBuffer"
    "\030\001 \001(\014\022\016\n\006height\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\017\n"
    "\007channel\030\004 \001(\005\022\021\n\ttimestamp\030\005 \001(\003\"s\n\rCon"
    "figuration\022\020\n\010cameraId\030\001 \001(\t\022\022\n\nresoluti"
    "on\030\002 \001(\t\022\023\n\013cameraState\030\003 \001(\010\022\'\n\013capture"
    "Mode\030\004 \001(\0162\022.sspkg.CaptureMode\"-\n\010Respon"
    "se\022\020\n\010response\030\001 \001(\005\022\017\n\007datalen\030\002 \001(\005*#\n"
    "\013CaptureMode\022\t\n\005image\020\000\022\t\n\005video\020\0012\262\003\n\rS"
    "ensorSharing\0222\n\tregister_\022\016.sspkg.Reques"
    "t\032\023.sspkg.RegisterInfo\"\000\022.\n\014captureImage"
    "\022\016.sspkg.Request\032\014.sspkg.Frame\"\000\022;\n\020getC"
    "onfiguration\022\016.sspkg.Request\032\025.sspkg.Con"
    "figurations\"\000\0225\n\020setConfiguration\022\016.sspk"
    "g.Request\032\017.sspkg.Response\"\000\0226\n\021toggleCa"
    "meraState\022\016.sspkg.Request\032\017.sspkg.Respon"
    "se\"\000\022/\n\013startStream\022\016.sspkg.Request\032\014.ss"
    "pkg.Frame\"\0000\001\022/\n\nstopStream\022\016.sspkg.Requ"
    "est\032\017.sspkg.Response\"\000\022/\n\nderegister\022\016.s"
    "spkg.Request\032\017.sspkg.Response\"\000"
};
static ::absl::once_flag descriptor_table_sensorsharing_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensorsharing_2eproto = {
    false,
    false,
    1111,
    descriptor_table_protodef_sensorsharing_2eproto,
    "sensorsharing.proto",
    &descriptor_table_sensorsharing_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_sensorsharing_2eproto::offsets,
    file_level_metadata_sensorsharing_2eproto,
    file_level_enum_descriptors_sensorsharing_2eproto,
    file_level_service_descriptors_sensorsharing_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensorsharing_2eproto_getter() {
  return &descriptor_table_sensorsharing_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensorsharing_2eproto(&descriptor_table_sensorsharing_2eproto);
namespace sspkg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaptureMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensorsharing_2eproto);
  return file_level_enum_descriptors_sensorsharing_2eproto[0];
}
bool CaptureMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Configurations::_Internal {
 public:
};

Configurations::Configurations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.Configurations)
}
Configurations::Configurations(const Configurations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configurations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conf_){from._impl_.conf_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sspkg.Configurations)
}

inline void Configurations::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conf_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Configurations::~Configurations() {
  // @@protoc_insertion_point(destructor:sspkg.Configurations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configurations::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conf()->~RepeatedPtrField();
}

void Configurations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configurations::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.Configurations)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conf()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configurations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sspkg.Configuration conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Configurations::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.Configurations)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sspkg.Configuration conf = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conf_size()); i < n; i++) {
    const auto& repfield = this->_internal_conf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.Configurations)
  return target;
}

::size_t Configurations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.Configurations)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sspkg.Configuration conf = 1;
  total_size += 1UL * this->_internal_conf_size();
  for (const auto& msg : this->_internal_conf()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configurations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configurations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configurations::GetClassData() const { return &_class_data_; }


void Configurations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configurations*>(&to_msg);
  auto& from = static_cast<const Configurations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.Configurations)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conf()->MergeFrom(from._internal_conf());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configurations::CopyFrom(const Configurations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.Configurations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configurations::IsInitialized() const {
  return true;
}

void Configurations::InternalSwap(Configurations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conf()->InternalSwap(other->_internal_mutable_conf());
}

::PROTOBUF_NAMESPACE_ID::Metadata Configurations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[0]);
}
// ===================================================================

class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Request, _impl_._has_bits_);
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cameraid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sspkg::Configurations& configlist(const Request* msg);
  static void set_has_configlist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sspkg::Configurations&
Request::_Internal::configlist(const Request* msg) {
  return *msg->_impl_.configlist_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameraid_) {}

    , decltype(_impl_.configlist_){nullptr}
    , decltype(_impl_.clientid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cameraid_.Set(from._internal_cameraid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.configlist_ = new ::sspkg::Configurations(*from._impl_.configlist_);
  }
  _this->_impl_.clientid_ = from._impl_.clientid_;
  // @@protoc_insertion_point(copy_constructor:sspkg.Request)
}

inline void Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameraid_) {}

    , decltype(_impl_.configlist_){nullptr}
    , decltype(_impl_.clientid_) { 0 }

  };
  _impl_.cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:sspkg.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cameraid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.configlist_;
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cameraid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.configlist_ != nullptr);
      _impl_.configlist_->Clear();
    }
  }
  _impl_.clientid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_clientid(&has_bits);
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cameraId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sspkg.Request.cameraId");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sspkg.Configurations configlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_configlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Request::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.Request)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 clientId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_clientid(), target);
  }

  // optional string cameraId = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cameraid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Request.cameraId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .sspkg.Configurations configlist = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::configlist(this),
        _Internal::configlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.Request)
  return target;
}

::size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string cameraId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cameraid());
    }

    // optional .sspkg.Configurations configlist = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.configlist_);
    }

    // optional int32 clientId = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_clientid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cameraid(from._internal_cameraid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_configlist()->::sspkg::Configurations::MergeFrom(
          from._internal_configlist());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.clientid_ = from._impl_.clientid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cameraid_, lhs_arena,
                                       &other->_impl_.cameraid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, _impl_.clientid_)
      + sizeof(Request::_impl_.clientid_)
      - PROTOBUF_FIELD_OFFSET(Request, _impl_.configlist_)>(
          reinterpret_cast<char*>(&_impl_.configlist_),
          reinterpret_cast<char*>(&other->_impl_.configlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[1]);
}
// ===================================================================

class Camera::_Internal {
 public:
  using HasBits = decltype(std::declval<Camera>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Camera, _impl_._has_bits_);
  static void set_has_cameraid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cameraname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_framerate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sensorsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fov(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Camera* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resolutions_){from._impl_.resolutions_}
    , decltype(_impl_.cameraid_) {}

    , decltype(_impl_.cameraname_) {}

    , decltype(_impl_.sensorsize_) {}

    , decltype(_impl_.pixel_) {}

    , decltype(_impl_.framerate_) {}

    , decltype(_impl_.fov_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cameraid_.Set(from._internal_cameraid(), _this->GetArenaForAllocation());
  }
  _impl_.cameraname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cameraname_.Set(from._internal_cameraname(), _this->GetArenaForAllocation());
  }
  _impl_.sensorsize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sensorsize_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.sensorsize_.Set(from._internal_sensorsize(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pixel_, &from._impl_.pixel_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.fov_) -
    reinterpret_cast<char*>(&_impl_.pixel_)) + sizeof(_impl_.fov_));
  // @@protoc_insertion_point(copy_constructor:sspkg.Camera)
}

inline void Camera::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resolutions_){arena}
    , decltype(_impl_.cameraid_) {}

    , decltype(_impl_.cameraname_) {}

    , decltype(_impl_.sensorsize_) {}

    , decltype(_impl_.pixel_) { 0 }

    , decltype(_impl_.framerate_) { 0 }

    , decltype(_impl_.fov_) { 0 }

  };
  _impl_.cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensorsize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sensorsize_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:sspkg.Camera)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Camera::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_resolutions()->~RepeatedPtrField();
  _impl_.cameraid_.Destroy();
  _impl_.cameraname_.Destroy();
  _impl_.sensorsize_.Destroy();
}

void Camera::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.Camera)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_resolutions()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cameraid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cameraname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sensorsize_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.pixel_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fov_) -
        reinterpret_cast<char*>(&_impl_.pixel_)) + sizeof(_impl_.fov_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string cameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sspkg.Camera.cameraId");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cameraName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cameraname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sspkg.Camera.cameraName");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pixel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pixel(&has_bits);
          _impl_.pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string resolutions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resolutions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "sspkg.Camera.resolutions");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 frameRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_framerate(&has_bits);
          _impl_.framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string sensorSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sensorsize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sspkg.Camera.sensorSize");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 fov = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_fov(&has_bits);
          _impl_.fov_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Camera::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.Camera)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string cameraId = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cameraid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Camera.cameraId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string cameraName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cameraname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Camera.cameraName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 pixel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pixel(), target);
  }

  // repeated string resolutions = 4;
  for (int i = 0, n = this->_internal_resolutions_size(); i < n; ++i) {
    const auto& s = this->_internal_resolutions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Camera.resolutions");
    target = stream->WriteString(4, s, target);
  }

  // optional int32 frameRate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_framerate(), target);
  }

  // optional string sensorSize = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_sensorsize();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Camera.sensorSize");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional int32 fov = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_fov(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.Camera)
  return target;
}

::size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.Camera)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resolutions = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_resolutions().size());
  for (int i = 0, n = _internal_resolutions().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_resolutions().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cameraId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cameraid());
    }

    // optional string cameraName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cameraname());
    }

    // optional string sensorSize = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sensorsize());
    }

    // optional int32 pixel = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pixel());
    }

    // optional int32 frameRate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_framerate());
    }

    // optional int32 fov = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_fov());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Camera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Camera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Camera::GetClassData() const { return &_class_data_; }


void Camera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Camera*>(&to_msg);
  auto& from = static_cast<const Camera&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.Camera)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_resolutions()->MergeFrom(from._internal_resolutions());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cameraid(from._internal_cameraid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cameraname(from._internal_cameraname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sensorsize(from._internal_sensorsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pixel_ = from._impl_.pixel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.framerate_ = from._impl_.framerate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fov_ = from._impl_.fov_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_resolutions()->InternalSwap(
      other->_internal_mutable_resolutions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cameraid_, lhs_arena,
                                       &other->_impl_.cameraid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cameraname_, lhs_arena,
                                       &other->_impl_.cameraname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sensorsize_, lhs_arena,
                                       &other->_impl_.sensorsize_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera, _impl_.fov_)
      + sizeof(Camera::_impl_.fov_)
      - PROTOBUF_FIELD_OFFSET(Camera, _impl_.pixel_)>(
          reinterpret_cast<char*>(&_impl_.pixel_),
          reinterpret_cast<char*>(&other->_impl_.pixel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[2]);
}
// ===================================================================

class RegisterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RegisterInfo, _impl_._has_bits_);
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RegisterInfo::RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.RegisterInfo)
}
RegisterInfo::RegisterInfo(const RegisterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameralist_){from._impl_.cameralist_}
    , decltype(_impl_.clientid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.clientid_ = from._impl_.clientid_;
  // @@protoc_insertion_point(copy_constructor:sspkg.RegisterInfo)
}

inline void RegisterInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameralist_){arena}
    , decltype(_impl_.clientid_) { 0 }

  };
}

RegisterInfo::~RegisterInfo() {
  // @@protoc_insertion_point(destructor:sspkg.RegisterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cameralist()->~RepeatedPtrField();
}

void RegisterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.RegisterInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cameralist()->Clear();
  _impl_.clientid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_clientid(&has_bits);
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .sspkg.Camera cameraList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cameralist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisterInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.RegisterInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_clientid(), target);
  }

  // repeated .sspkg.Camera cameraList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cameralist_size()); i < n; i++) {
    const auto& repfield = this->_internal_cameralist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.RegisterInfo)
  return target;
}

::size_t RegisterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.RegisterInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sspkg.Camera cameraList = 2;
  total_size += 1UL * this->_internal_cameralist_size();
  for (const auto& msg : this->_internal_cameralist()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 clientId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterInfo::GetClassData() const { return &_class_data_; }


void RegisterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterInfo*>(&to_msg);
  auto& from = static_cast<const RegisterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.RegisterInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cameralist()->MergeFrom(from._internal_cameralist());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterInfo::CopyFrom(const RegisterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.RegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInfo::IsInitialized() const {
  return true;
}

void RegisterInfo::InternalSwap(RegisterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_cameralist()->InternalSwap(other->_internal_mutable_cameralist());

  swap(_impl_.clientid_, other->_impl_.clientid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[3]);
}
// ===================================================================

class Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<Frame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Frame, _impl_._has_bits_);
  static void set_has_rawbuffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Frame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rawbuffer_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.channel_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rawbuffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rawbuffer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rawbuffer_.Set(from._internal_rawbuffer(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:sspkg.Frame)
}

inline void Frame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rawbuffer_) {}

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.width_) { 0 }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.channel_) { 0 }

  };
  _impl_.rawbuffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rawbuffer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:sspkg.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Frame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rawbuffer_.Destroy();
}

void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.Frame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rawbuffer_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.height_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.channel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes rawBuffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rawbuffer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Frame::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.Frame)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes rawBuffer = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rawbuffer();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_width(), target);
  }

  // optional int32 channel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_channel(), target);
  }

  // optional int64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.Frame)
  return target;
}

::size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.Frame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes rawBuffer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_rawbuffer());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_height());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_width());
    }

    // optional int64 timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional int32 channel = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_channel());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.Frame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rawbuffer(from._internal_rawbuffer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rawbuffer_, lhs_arena,
                                       &other->_impl_.rawbuffer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, _impl_.channel_)
      + sizeof(Frame::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(Frame, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[4]);
}
// ===================================================================

class Configuration::_Internal {
 public:
  using HasBits = decltype(std::declval<Configuration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Configuration, _impl_._has_bits_);
  static void set_has_cameraid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camerastate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_capturemode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configuration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameraid_) {}

    , decltype(_impl_.resolution_) {}

    , decltype(_impl_.camerastate_) {}

    , decltype(_impl_.capturemode_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cameraid_.Set(from._internal_cameraid(), _this->GetArenaForAllocation());
  }
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.resolution_.Set(from._internal_resolution(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.camerastate_, &from._impl_.camerastate_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.capturemode_) -
    reinterpret_cast<char*>(&_impl_.camerastate_)) + sizeof(_impl_.capturemode_));
  // @@protoc_insertion_point(copy_constructor:sspkg.Configuration)
}

inline void Configuration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameraid_) {}

    , decltype(_impl_.resolution_) {}

    , decltype(_impl_.camerastate_) { false }

    , decltype(_impl_.capturemode_) { 0 }

  };
  _impl_.cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:sspkg.Configuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configuration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cameraid_.Destroy();
  _impl_.resolution_.Destroy();
}

void Configuration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.Configuration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cameraid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.resolution_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.camerastate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.capturemode_) -
        reinterpret_cast<char*>(&_impl_.camerastate_)) + sizeof(_impl_.capturemode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string cameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sspkg.Configuration.cameraId");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resolution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sspkg.Configuration.resolution");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool cameraState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_camerastate(&has_bits);
          _impl_.camerastate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .sspkg.CaptureMode captureMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sspkg::CaptureMode_IsValid(static_cast<int>(val)))) {
            _internal_set_capturemode(static_cast<::sspkg::CaptureMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Configuration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.Configuration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string cameraId = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cameraid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Configuration.cameraId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string resolution = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_resolution();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "sspkg.Configuration.resolution");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool cameraState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_camerastate(), target);
  }

  // optional .sspkg.CaptureMode captureMode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_capturemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.Configuration)
  return target;
}

::size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.Configuration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cameraId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cameraid());
    }

    // optional string resolution = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_resolution());
    }

    // optional bool cameraState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional .sspkg.CaptureMode captureMode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_capturemode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configuration::GetClassData() const { return &_class_data_; }


void Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configuration*>(&to_msg);
  auto& from = static_cast<const Configuration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.Configuration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cameraid(from._internal_cameraid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_resolution(from._internal_resolution());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.camerastate_ = from._impl_.camerastate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.capturemode_ = from._impl_.capturemode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cameraid_, lhs_arena,
                                       &other->_impl_.cameraid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resolution_, lhs_arena,
                                       &other->_impl_.resolution_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configuration, _impl_.capturemode_)
      + sizeof(Configuration::_impl_.capturemode_)
      - PROTOBUF_FIELD_OFFSET(Configuration, _impl_.camerastate_)>(
          reinterpret_cast<char*>(&_impl_.camerastate_),
          reinterpret_cast<char*>(&other->_impl_.camerastate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[5]);
}
// ===================================================================

class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Response, _impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datalen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sspkg.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sspkg.Response)
}

inline void Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_) { 0 }

    , decltype(_impl_.datalen_) { 0 }

  };
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:sspkg.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:sspkg.Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.response_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.datalen_) -
        reinterpret_cast<char*>(&_impl_.response_)) + sizeof(_impl_.datalen_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 datalen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_datalen(&has_bits);
          _impl_.datalen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Response::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sspkg.Response)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_response(), target);
  }

  // optional int32 datalen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_datalen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sspkg.Response)
  return target;
}

::size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sspkg.Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_response());
    }

    // optional int32 datalen = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_datalen());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sspkg.Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.datalen_ = from._impl_.datalen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sspkg.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, _impl_.datalen_)
      + sizeof(Response::_impl_.datalen_)
      - PROTOBUF_FIELD_OFFSET(Response, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensorsharing_2eproto_getter, &descriptor_table_sensorsharing_2eproto_once,
      file_level_metadata_sensorsharing_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace sspkg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sspkg::Configurations*
Arena::CreateMaybeMessage< ::sspkg::Configurations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::Configurations >(arena);
}
template<> PROTOBUF_NOINLINE ::sspkg::Request*
Arena::CreateMaybeMessage< ::sspkg::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::sspkg::Camera*
Arena::CreateMaybeMessage< ::sspkg::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::sspkg::RegisterInfo*
Arena::CreateMaybeMessage< ::sspkg::RegisterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::RegisterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sspkg::Frame*
Arena::CreateMaybeMessage< ::sspkg::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::sspkg::Configuration*
Arena::CreateMaybeMessage< ::sspkg::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::sspkg::Response*
Arena::CreateMaybeMessage< ::sspkg::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sspkg::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
